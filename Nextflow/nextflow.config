manifest {
  name = 'cageseq-workflow-1.0.2'
  description = 'CAGE-seq pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.10.0'
  version = '1.0.2'
}

// Global default params, used in configs
params {

  // Workflow flags
  genome = false
  input = 'data/*R{1,2}_001.fastq.gz'
  outdir = './results'
  publish_dir_mode = 'copy'
  samplesheet = false

  // CAGE-seq specific options
  // Alignment options
  aligner = 'star'
  save_reference = false

  // Skipping options
  skip_initial_fastqc = false
  skip_alignment = false
  skip_trimming = false
  skip_trimming_fastqc = false
  skip_samtools_stats = false
  skip_ctss_generation = false
  skip_ctss_qc = false


  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
}

// use: nextflow run main.nf -profile $profiles
profiles {
  conda { process.conda = "$projectDir/environment.yml" }

  docker {
    docker.enabled = true
    docker.runOptions = '-u \$(id -u):\$(id -g)' // this option specifies that the user is the user of the host and the group is the group of the host
  }

}

/*
aws {
  accessKey = <your S3 access key>
  secretKey = <your S3 secret key>
  region = <region identifier>
}
*/


env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
}


// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}